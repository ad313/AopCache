<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AopCache.Core</name>
    </assembly>
    <members>
        <member name="T:AopCache.Core.Abstractions.IAopCacheProvider">
            <summary>
            Aop 缓存接口
            </summary>
        </member>
        <member name="M:AopCache.Core.Abstractions.IAopCacheProvider.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key">key</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IAopCacheProvider.Set(System.String,System.Object,System.Type,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="type">数据类型</param>
            <param name="absoluteExpiration">绝对过期实现</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IAopCacheProvider.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Core.Abstractions.IEventBusProvider">
            <summary>
            EventBus
            </summary>
        </member>
        <member name="P:AopCache.Core.Abstractions.IEventBusProvider.ServiceProvider">
            <summary>
            ServiceProvider
            </summary>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.PublishAsync``1(System.String,AopCache.Core.Abstractions.EventMessageModel{``0})">
            <summary>
            发布事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="message">数据</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.PublishQueueAsync``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            发布事件 数据放到队列，并发布通知到订阅者
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="message">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.Subscribe``1(System.String,System.Action{AopCache.Core.Abstractions.EventMessageModel{``0}})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.Subscribe``1(System.String,System.Func{AopCache.Core.Abstractions.EventMessageModel{``0},System.Threading.Tasks.Task})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueue``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 从队列读取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueue``1(System.String,System.Func{System.Func{System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueue``1(System.String,System.Int32,System.Int32,AopCache.Core.Abstractions.ExceptionHandlerEnum,System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 分批次消费
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="length">每次处理条数</param>
            <param name="delay">每次处理间隔 毫秒</param>
            <param name="exceptionHandler">异常处理方式</param>
            <param name="handler">订阅处理</param>
            <param name="error">发生异常时回调</param>
            <param name="completed">本次消费完成回调 最后执行</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetQueueLength(System.String)">
            <summary>
            获取某个频道队列数据量
            </summary>
            <param name="channel">频道名称</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetQueueItems``1(System.String,System.Int32)">
            <summary>
            获取某个频道队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetQueueItemsAsync``1(System.String,System.Int32)">
            <summary>
            获取某个频道队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetErrorQueueLength(System.String)">
            <summary>
            获取某个频道错误队列数据量
            </summary>
            <param name="channel">频道名称</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetErrorQueueItems``1(System.String,System.Int32)">
            <summary>
            获取某个频道错误队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.GetErrorQueueItemsAsync``1(System.String,System.Int32)">
            <summary>
            获取某个频道错误队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.UnSubscribe(System.String)">
            <summary>
            取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SetEnable(System.Boolean,System.String)">
            <summary>
            设置发布订阅是否开启
            </summary>
            <param name="enable">true 开启开关，false 关闭开关</param>
            <param name="channel">为空时表示总开关</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeTest``1(System.String,System.Action{AopCache.Core.Abstractions.EventMessageModel{``0}})">
            <summary>
            订阅事件 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeTest``1(System.String,System.Func{AopCache.Core.Abstractions.EventMessageModel{``0},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueueTest``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 从队列读取数据 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueueTest``1(System.String,System.Func{System.Func{System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Abstractions.IEventBusProvider.SubscribeQueueTest``1(System.String,System.Int32,System.Int32,AopCache.Core.Abstractions.ExceptionHandlerEnum,System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 分批次消费 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="length">每次处理条数</param>
            <param name="delay">每次处理间隔 毫秒</param>
            <param name="exceptionHandler">异常处理方式</param>
            <param name="handler">订阅处理</param>
            <param name="error">发生异常时回调</param>
            <param name="completed">本次消费完成回调 最后执行</param>
        </member>
        <member name="T:AopCache.Core.Abstractions.EventMessageModel`1">
            <summary>
            事件消息模型
            </summary>
        </member>
        <member name="P:AopCache.Core.Abstractions.EventMessageModel`1.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:AopCache.Core.Abstractions.EventMessageModel`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AopCache.Core.Abstractions.EventMessageModel`1.TrackId">
            <summary>
            TrackId
            </summary>
        </member>
        <member name="M:AopCache.Core.Abstractions.EventMessageModel`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AopCache.Core.Abstractions.EventMessageModel`1.#ctor(`0,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:AopCache.Core.Abstractions.ExceptionHandlerEnum">
            <summary>
            处理错误枚举
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.Continue">
            <summary>
            忽略错误，继续执行
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.Stop">
            <summary>
            停止执行
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.PushToSelfQueueAndStop">
            <summary>
            重新加入本身队列 并且停止执行
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.PushToSelfQueueAndContinue">
            <summary>
            重新加入本身队列 并且忽略错误，继续执行
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.PushToErrorQueueAndStop">
            <summary>
            加入错误队列 并且停止执行
            </summary>
        </member>
        <member name="F:AopCache.Core.Abstractions.ExceptionHandlerEnum.PushToErrorQueueAndContinue">
            <summary>
            加入错误队列 并且忽略错误，继续执行
            </summary>
        </member>
        <member name="T:AopCache.Core.Abstractions.ISerializerProvider">
            <summary>
            序列化接口
            </summary>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Serialize(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.SerializeBytes(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Clone``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Abstractions.ISerializerProvider.Clone(System.Object,System.Type)">
            <summary>
            克隆对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Core.Common.AsyncLock">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="T:AopCache.Core.Common.Helpers">
            <summary>
            对象转换成字典
            </summary>
        </member>
        <member name="M:AopCache.Core.Common.Helpers.SplitList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            把list按照指定数量分隔
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Core.Implements.MemoryCacheProvider">
            <summary>
            Aop 内存缓存实现
            </summary>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryCacheProvider.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,AopCache.Core.Abstractions.ISerializerProvider)">
            <summary>
            初始化
            </summary>
            <param name="cache"></param>
            <param name="serializerProvider"></param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryCacheProvider.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key">key</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryCacheProvider.Set(System.String,System.Object,System.Type,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="type">数据类型</param>
            <param name="absoluteExpiration">绝对过期实现</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryCacheProvider.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Core.Implements.MemoryEventBusProvider">
            <summary>
            基于内存的发布订阅实现
            </summary>
        </member>
        <member name="P:AopCache.Core.Implements.MemoryEventBusProvider.Enable">
            <summary>
            总开关默认开启
            </summary>
        </member>
        <member name="F:AopCache.Core.Implements.MemoryEventBusProvider._channelEnableDictionary">
            <summary>
            频道开关
            </summary>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.#ctor(AopCache.Core.Abstractions.ISerializerProvider,System.IServiceProvider)">
            <summary>
            初始化
            </summary>
            <param name="serializerProvider"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:AopCache.Core.Implements.MemoryEventBusProvider.ServiceProvider">
            <summary>
            ServiceProvider
            </summary>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.PublishAsync``1(System.String,AopCache.Core.Abstractions.EventMessageModel{``0})">
            <summary>
            发布事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="message">数据</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.PublishQueueAsync``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            发布事件 数据放到队列，并发布通知到订阅者
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="message">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.Subscribe``1(System.String,System.Action{AopCache.Core.Abstractions.EventMessageModel{``0}})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.Subscribe``1(System.String,System.Func{AopCache.Core.Abstractions.EventMessageModel{``0},System.Threading.Tasks.Task})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueue``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 从队列读取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueue``1(System.String,System.Func{System.Func{System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueue``1(System.String,System.Int32,System.Int32,AopCache.Core.Abstractions.ExceptionHandlerEnum,System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 分批次消费
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="length">每次处理条数</param>
            <param name="delay">每次处理间隔 毫秒</param>
            <param name="exceptionHandler">异常处理方式</param>
            <param name="handler">订阅处理</param>
            <param name="error">发生异常时回调</param>
            <param name="completed">本次消费完成回调 最后执行</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetQueueLength(System.String)">
            <summary>
            获取某个频道队列数据量
            </summary>
            <param name="channel">频道名称</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetQueueItems``1(System.String,System.Int32)">
            <summary>
            获取某个频道队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetQueueItemsAsync``1(System.String,System.Int32)">
            <summary>
            获取某个频道队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetErrorQueueLength(System.String)">
            <summary>
            获取某个频道错误队列数据量
            </summary>
            <param name="channel">频道名称</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetErrorQueueItems``1(System.String,System.Int32)">
            <summary>
            获取某个频道错误队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.GetErrorQueueItemsAsync``1(System.String,System.Int32)">
            <summary>
            获取某个频道错误队列数据
            </summary>
            <param name="channel">频道名称</param>
            <param name="length">获取指定的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.UnSubscribe(System.String)">
            <summary>
            取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SetEnable(System.Boolean,System.String)">
            <summary>
            设置订阅是否消费
            </summary>
            <param name="enable">true 开启开关，false 关闭开关</param>
            <param name="channel">为空时表示总开关</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeTest``1(System.String,System.Action{AopCache.Core.Abstractions.EventMessageModel{``0}})">
            <summary>
            订阅事件 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeTest``1(System.String,System.Func{AopCache.Core.Abstractions.EventMessageModel{``0},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueueTest``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 从队列读取数据 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueueTest``1(System.String,System.Func{System.Func{System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="handler">订阅处理</param>
        </member>
        <member name="M:AopCache.Core.Implements.MemoryEventBusProvider.SubscribeQueueTest``1(System.String,System.Int32,System.Int32,AopCache.Core.Abstractions.ExceptionHandlerEnum,System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{``0},System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            订阅事件 从队列读取数据 分批次消费 用于单元测试
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel">频道名称</param>
            <param name="length">每次处理条数</param>
            <param name="delay">每次处理间隔 毫秒</param>
            <param name="exceptionHandler">异常处理方式</param>
            <param name="handler">订阅处理</param>
            <param name="error">发生异常时回调</param>
            <param name="completed">本次消费完成回调 最后执行</param>
        </member>
        <member name="T:AopCache.Core.Implements.SerializerProvider">
            <summary>
            序列化接口
            </summary>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Serialize(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.SerializeBytes(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Clone``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Core.Implements.SerializerProvider.Clone(System.Object,System.Type)">
            <summary>
            克隆对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
