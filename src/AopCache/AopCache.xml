<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AopCache</name>
    </assembly>
    <members>
        <member name="T:AopCache.Abstractions.IAopCacheProvider">
            <summary>
            aop 缓存接口
            </summary>
        </member>
        <member name="M:AopCache.Abstractions.IAopCacheProvider.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key">key</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.IAopCacheProvider.Set(System.String,System.Object,System.Type,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="type">数据类型</param>
            <param name="absoluteExpiration">绝对过期实现</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.IAopCacheProvider.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Abstractions.IAopEventBusProvider">
            <summary>
            Aop EventBus
            </summary>
        </member>
        <member name="M:AopCache.Abstractions.IAopEventBusProvider.PublishAsync``1(System.String,AopCache.Abstractions.AopMessageModel{``0})">
            <summary>
            发布事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.IAopEventBusProvider.PublishToQueueAsync``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            发布事件 发布数据到队列，并发布通知
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.IAopEventBusProvider.Subscribe``1(System.String,System.Action{AopCache.Abstractions.AopMessageModel{``0}})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:AopCache.Abstractions.IAopEventBusProvider.SubscribeFromQueue``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 队列中有新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:AopCache.Abstractions.IAopEventBusProvider.SubscribeFromQueue``1(System.String,System.Int32,System.Int32,System.Boolean,System.Action{System.Collections.Generic.List{``0}})">
            <summary>
            订阅事件 队列中有新数据 分批次消费
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="length">每次处理条数</param>
            <param name="delay">处理完一次的停顿时间 毫秒</param>
            <param name="rollbackToQueueWhenException">当处理失败时是否把数据重新加入到队列</param>
            <param name="message"></param>
        </member>
        <member name="T:AopCache.Abstractions.AopMessageModel`1">
            <summary>
            事件消息模型
            </summary>
        </member>
        <member name="P:AopCache.Abstractions.AopMessageModel`1.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:AopCache.Abstractions.AopMessageModel`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AopCache.Abstractions.AopMessageModel`1.TrackId">
            <summary>
            TrackId
            </summary>
        </member>
        <member name="M:AopCache.Abstractions.AopMessageModel`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AopCache.Abstractions.AopMessageModel`1.#ctor(`0,System.Nullable{System.Guid})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:AopCache.Abstractions.ISerializerProvider">
            <summary>
            序列化接口
            </summary>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Serialize(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.SerializeBytes(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Clone``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Abstractions.ISerializerProvider.Clone(System.Object,System.Type)">
            <summary>
            克隆对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.AopCacheAttribute">
            <summary>
            Aop 缓存
            </summary>
        </member>
        <member name="P:AopCache.AopCacheAttribute.Group">
            <summary>
            指定缓存键值分组
            </summary>
        </member>
        <member name="P:AopCache.AopCacheAttribute.Key">
            <summary>
            指定缓存键值 可以附加参数 如 UserInfo_{model:Name}_{type}
            </summary>
        </member>
        <member name="P:AopCache.AopCacheAttribute.Type">
            <summary>
            缓存时间类型 默认秒
            </summary>
        </member>
        <member name="P:AopCache.AopCacheAttribute.Length">
            <summary>
            时间长度 与时间类型 配合使用 0 表示永不过期
            </summary>
        </member>
        <member name="P:AopCache.AopCacheAttribute.ThreadLock">
            <summary>
            缓存失效后调用方法时 是否使用线程锁，默认true
            </summary>
        </member>
        <member name="F:AopCache.AopCacheAttribute.TaskResultMethod">
            <summary>
            包装 Task
            </summary>
        </member>
        <member name="F:AopCache.AopCacheAttribute._lock">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="F:AopCache.AopCacheAttribute.GroupDictionary">
            <summary>
            存储 group key
            </summary>
        </member>
        <member name="M:AopCache.AopCacheAttribute.GetCahceValue(System.String,System.Type,AspectCore.DynamicProxy.AspectContext)">
            <summary>
            获取缓存，并处理返回值
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.AopCacheAttribute.GetDirectValueWithSetCache(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate,System.String,System.Type)">
            <summary>
            直接调用方法，并把结果加入缓存
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="key">缓存key</param>
            <param name="type">缓存值类型</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.AopCacheAttribute.GetCacheNewTime(AopCache.CacheTimeType,System.Int32)">
            <summary>
            计算缓存的时间
            </summary>
            <param name="type"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.CacheTimeType">
            <summary>
            缓存的时间类型
            </summary>
        </member>
        <member name="F:AopCache.CacheTimeType.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:AopCache.CacheTimeType.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:AopCache.CacheTimeType.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:AopCache.CacheTimeType.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="T:AopCache.AopPublisherAttribute">
            <summary>
            Aop 发布事件
            </summary>
        </member>
        <member name="P:AopCache.AopPublisherAttribute.Channel">
            <summary>
            发布或者订阅的Key值
            </summary>
        </member>
        <member name="P:AopCache.AopPublisherAttribute.MessageSource">
            <summary>
            发布事件的消息来源
            </summary>
        </member>
        <member name="P:AopCache.AopPublisherAttribute.Enable">
            <summary>
            是否开启
            </summary>
        </member>
        <member name="T:AopCache.MessageSource">
            <summary>
            发布事件消息来源
            </summary>
        </member>
        <member name="F:AopCache.MessageSource.InParams">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="F:AopCache.MessageSource.OutParams">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AopCache.MessageSource.NoParams">
            <summary>
            无需参数
            </summary>
        </member>
        <member name="F:AopCache.MessageSource.Other">
            <summary>
            其他参数、自定义参数
            </summary>
        </member>
        <member name="T:AopCache.AopSubscriberTagAttribute">
            <summary>
            aop 订阅标记
            </summary>
        </member>
        <member name="P:AopCache.AopSubscriberTagAttribute.Channel">
            <summary>
            订阅的频道值
            </summary>
        </member>
        <member name="P:AopCache.AopSubscriberTagAttribute.ActionType">
            <summary>
            触发类型
            </summary>
        </member>
        <member name="P:AopCache.AopSubscriberTagAttribute.Map">
            <summary>
            输入参数映射
            </summary>
        </member>
        <member name="T:AopCache.ActionType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:AopCache.ActionType.DeleteByKey">
            <summary>
            通过 key 删除缓存 key
            </summary>
        </member>
        <member name="F:AopCache.ActionType.DeleteByGroup">
            <summary>
            通过 group 删除缓存 group
            </summary>
        </member>
        <member name="T:AopCache.Common.FastConvertHelper">
            <summary>
            对象转换成字典
            </summary>
        </member>
        <member name="T:AopCache.Common.ParamsHelper">
            <summary>
            处理参数辅助类
            </summary>
        </member>
        <member name="F:AopCache.Common.ParamsHelper.KeyParamtersCache">
            <summary>
            每个方法 key中的参数
            </summary>
        </member>
        <member name="F:AopCache.Common.ParamsHelper.Separator">
            <summary>
            参数分隔符
            </summary>
        </member>
        <member name="M:AopCache.Common.ParamsHelper.FillValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            格式化字符串中的占位符，用给定的参数值填充
            </summary>
            <param name="source">原始字符串</param>
            <param name="paramDictionary">参数数据字典</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Common.ParamsHelper.GetKeyParamters(System.String)">
            <summary>
            处理附加的参数
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:AopCache.Common.ParamsHelper.GetKeyParamtersInternal(System.String)">
            <summary>
            正则匹配参数，返回参数数组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Common.ParamsHelper.FillParamValues(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理附加参数，给占位符填充值
            </summary>
            <param name="source">原始字符串</param>
            <param name="keys">附加的参数名称数组</param>
            <param name="pars">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Common.ParamsHelper.FillParamValues(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理附加参数，给占位符填充值
            </summary>
            <param name="source">原始字符串</param>
            <param name="dicMaps">附加的参数名称数组</param>
            <param name="pars">参数字段</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Extensions.AspectContextExtentions.GetParamsDictionary(AspectCore.DynamicProxy.AspectContext)">
            <summary>
            获取参数字典
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Extensions.AspectContextExtentions.GetDefaultKey(AspectCore.DynamicProxy.AspectContext)">
            <summary>
            获取默认Key值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Extensions.AspectContextExtentions.GetReturnType(AspectCore.DynamicProxy.AspectContext)">
            <summary>
            获取返回值类型
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Extensions.AspectContextExtentions.GetReturnValue(AspectCore.DynamicProxy.AspectContext)">
            <summary>
            获取返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Implements.MemoryCacheProvider">
            <summary>
            aop 内存缓存实现
            </summary>
        </member>
        <member name="M:AopCache.Implements.MemoryCacheProvider.Get(System.String,System.Type)">
            <summary>
            获取缓存
            </summary>
            <param name="key">key</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.MemoryCacheProvider.Set(System.String,System.Object,System.Type,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="type">数据类型</param>
            <param name="absoluteExpiration">绝对过期实现</param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.MemoryCacheProvider.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Implements.MemoryEventBusProvider">
            <summary>
            基于进程的发布订阅实现
            </summary>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.#ctor(AopCache.Abstractions.ISerializerProvider)">
            <summary>
            初始化
            </summary>
            <param name="serializerProvider"></param>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.PublishAsync``1(System.String,AopCache.Abstractions.AopMessageModel{``0})">
            <summary>
            发布事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.PublishToQueueAsync``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            发布事件 发布数据到队列，并发布通知
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.Subscribe``1(System.String,System.Action{AopCache.Abstractions.AopMessageModel{``0}})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.Subscribe2``1(System.String,System.Func{AopCache.Abstractions.AopMessageModel{``0},System.Threading.Tasks.Task})">
            <summary>
            订阅事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.SubscribeFromQueue``1(System.String,System.Action{System.Func{System.Int32,System.Collections.Generic.List{``0}}})">
            <summary>
            订阅事件 队列中有新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:AopCache.Implements.MemoryEventBusProvider.SubscribeFromQueue``1(System.String,System.Int32,System.Int32,System.Boolean,System.Action{System.Collections.Generic.List{``0}})">
            <summary>
            订阅事件 队列中有新数据 分批次消费
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="length">每次处理条数</param>
            <param name="delay">处理完一次的停顿时间 毫秒</param>
            <param name="rollbackToQueueWhenException">当处理失败时是否把数据重新加入到队列</param>
            <param name="message"></param>
        </member>
        <member name="T:AopCache.Implements.SerializerProvider">
            <summary>
            序列化接口
            </summary>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Serialize(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.SerializeBytes(System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Clone``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AopCache.Implements.SerializerProvider.Clone(System.Object,System.Type)">
            <summary>
            克隆对象
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Implements.SubscriberWorker">
            <summary>
            订阅服务
            </summary>
        </member>
        <member name="M:AopCache.Implements.SubscriberWorker.#ctor(AopCache.Abstractions.IAopEventBusProvider,AopCache.Abstractions.IAopCacheProvider)">
            <summary>
            初始化 订阅服务
            </summary>
            <param name="eventBusProvider"></param>
            <param name="cacheProvider"></param>
        </member>
        <member name="M:AopCache.Implements.SubscriberWorker.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            处理订阅
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:AopCache.Runtime.DependencyRegistrator">
            <summary>
            依赖引导器
            </summary>
        </member>
        <member name="P:AopCache.Runtime.DependencyRegistrator.ServiceCollection">
            <summary>
            ServiceCollection
            </summary>
        </member>
        <member name="M:AopCache.Runtime.DependencyRegistrator.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AopCache.Runtime.DependencyRegistrator.SetServiceCollection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            设置ServiceCollection
            </summary>
            <param name="serviceCollection"></param>
        </member>
        <member name="M:AopCache.Runtime.DependencyRegistrator.RegisterServices">
            <summary>
            注册依赖服务
            </summary>
        </member>
        <member name="T:AopCache.Runtime.TypeFinder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:AopCache.Runtime.TypeFinder.SkipAssemblies">
            <summary>
            跳过的程序集
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.LoadAssemblies(System.String)">
            <summary>
            加载程序集到当前应用程序域
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.Match(System.String)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.LoadAssemblyToAppDomain(System.String)">
            <summary>
            将程序集添加当前应用程序域
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.GetAssembliesFromCurrentAppDomain">
            <summary>
            从当前应用程序域获取程序集列表
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.Match(System.Reflection.Assembly)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:AopCache.Runtime.TypeFinder.FindAllInterface(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AopCacheExtentions">
            <summary>
            注册AopCache
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AopCacheExtentions.AddAopTriggerUseMemoryEventBus(Microsoft.Extensions.DependencyInjection.AopCacheOption)">
            <summary>
            注册 AopCache 缓存清理触发器
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
    </members>
</doc>
